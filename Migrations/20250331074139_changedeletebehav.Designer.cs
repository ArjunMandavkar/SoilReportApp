// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoilReportApp.DataAccess;

#nullable disable

namespace SoilReportApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331074139_changedeletebehav")]
    partial class changedeletebehav
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SoilReportApp.Models.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("SoilReportApp.Models.CropStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CropStages");
                });

            modelBuilder.Entity("SoilReportApp.Models.Reading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("K")
                        .HasColumnType("double precision");

                    b.Property<double>("Moisture")
                        .HasColumnType("double precision");

                    b.Property<double>("N")
                        .HasColumnType("double precision");

                    b.Property<double>("P")
                        .HasColumnType("double precision");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Test")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("SoilReportApp.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CropId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CropStageId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FarmerId")
                        .HasColumnType("uuid");

                    b.Property<double>("KAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("MoistureAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("NAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("PAvg")
                        .HasColumnType("double precision");

                    b.Property<string>("Report")
                        .HasColumnType("text");

                    b.Property<Guid?>("SoilTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.HasIndex("CropStageId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("FarmerId");

                    b.HasIndex("SoilTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SoilReportApp.Models.SoilType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SoilTypes");
                });

            modelBuilder.Entity("SoilReportApp.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SoilReportApp.Models.Reading", b =>
                {
                    b.HasOne("SoilReportApp.Models.Request", "Request")
                        .WithMany("Readings")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SoilReportApp.Models.Request", b =>
                {
                    b.HasOne("SoilReportApp.Models.Crop", "Crop")
                        .WithMany("Requests")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SoilReportApp.Models.CropStage", "CropStage")
                        .WithMany("Requests")
                        .HasForeignKey("CropStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SoilReportApp.Models.User", "Expert")
                        .WithMany("RequestsAsExpert")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SoilReportApp.Models.User", "Farmer")
                        .WithMany("RequestsAsFarmer")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SoilReportApp.Models.SoilType", "SoilType")
                        .WithMany("Requests")
                        .HasForeignKey("SoilTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Crop");

                    b.Navigation("CropStage");

                    b.Navigation("Expert");

                    b.Navigation("Farmer");

                    b.Navigation("SoilType");
                });

            modelBuilder.Entity("SoilReportApp.Models.Crop", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SoilReportApp.Models.CropStage", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SoilReportApp.Models.Request", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("SoilReportApp.Models.SoilType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SoilReportApp.Models.User", b =>
                {
                    b.Navigation("RequestsAsExpert");

                    b.Navigation("RequestsAsFarmer");
                });
#pragma warning restore 612, 618
        }
    }
}
